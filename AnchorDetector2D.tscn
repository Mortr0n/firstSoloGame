[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=2]
script/source = "class_name AnchorDetector2D
extends Area2D

# Emitted when entering an anchor area.
signal anchor_detected(anchor)
# Emitted after exiting all anchor areas.
signal anchor_detached


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_AnchorDetector2D_area_entered(area: Anchor2D) -> void:
	emit_signal(\"anchor_detected\", area)

# When exiting an area, we have to ensure we're not entering another anchor.
func _on_AnchorDetector2D_area_exited(area: Anchor2D) -> void:
	var areas: Array = get_overlapping_areas()
	# To do so, we check that's there's but one overlapping area left and that it's
	# the one passed to this callback function.
	if get_overlapping_areas().size() == 1 and area == areas[0]:
		emit_signal(\"anchor_detached\")
"

[sub_resource type="CapsuleShape2D" id=1]
radius = 6.0
height = 10.0

[node name="AnchorDetector2D" type="Area2D"]
collision_layer = 0
collision_mask = 4
monitorable = false
script = SubResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[connection signal="area_entered" from="." to="." method="_on_AnchorDetector2D_area_entered"]
[connection signal="area_exited" from="." to="." method="_on_AnchorDetector2D_area_exited"]
